// Generated by CoffeeScript 1.4.0
(function() {
  var DEFAULT, EVENT, OVERLAYS, calcTop, excludeArgs, getJNodeId, getMask, getMaxZIndex, getWrapper, hideOlay, makeUniqueId, makeUniqueInt, methods, olayStored, overlay, showOlay, storeMask, storeOlayId, storeWrapper,
    __slice = [].slice;

  excludeArgs = function(fn, num) {
    var _handler;
    return _handler = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return fn.apply(null, args.slice(num));
    };
  };

  makeUniqueInt = function() {
    return new Date().getTime();
  };

  makeUniqueId = function() {
    return "id" + (makeUniqueInt());
  };

  getJNodeId = function(jnode) {
    var id;
    id = jnode.attr('id');
    if (!id) {
      id = makeUniqueId();
      jnode.attr('id', id);
    }
    return id;
  };

  EVENT = {
    LOADED: 'olayLoaded',
    CLOSED: 'olayClosed'
  };

  DEFAULT = {
    mask: null,
    top: null,
    closeOnEsc: true,
    closeOnMask: true,
    closeSel: null,
    loaderCls: null,
    showOnLoad: true,
    onLoad: void 0,
    onClose: void 0,
    triggerSel: null,
    lazy: {
      ev: null,
      cb: void 0
    }
  };

  OVERLAYS = {};

  getMaxZIndex = function() {
    var i, maxZIndex, o, zIndexes;
    zIndexes = (function() {
      var _results;
      _results = [];
      for (i in OVERLAYS) {
        o = OVERLAYS[i];
        _results.push(o.zIndex);
      }
      return _results;
    })();
    maxZIndex = Math.max.apply(Math, zIndexes);
    if (maxZIndex > 0) {
      return maxZIndex;
    } else {
      return 5000;
    }
  };

  calcTop = function(olay) {
    var height;
    height = olay.outerHeight();
    if (height > screen.availHeight) {
      return 10;
    } else {
      return (screen.availHeight - height) / 2;
    }
  };

  storeOlayId = function(id, opts) {
    return OVERLAYS[id] = opts;
  };

  olayStored = function(id) {
    return id in OVERLAYS;
  };

  storeWrapper = function(olayId, wrapper) {
    return OVERLAYS[olayId].wrapper = wrapper;
  };

  getWrapper = function(olayId) {
    return OVERLAYS[olayId].wrapper;
  };

  storeMask = function(olayId, mask) {
    return OVERLAYS[olayId].mask = mask;
  };

  getMask = function(olayId) {
    return OVERLAYS[olayId].mask;
  };

  hideOlay = function(id) {
    var olay;
    olay = jQuery("#" + id);
    olay.css('display', 'none');
    return olay.trigger(EVENT.CLOSED, id);
  };

  showOlay = function(id) {
    return (jQuery("#" + id)).css('display', 'block');
  };

  methods = function(olayId) {
    var body, olay, olayStyle, wrapperStyle;
    body = jQuery(document.body);
    olay = jQuery("#" + olayId);
    olayStyle = {
      'position': 'absolute'
    };
    wrapperStyle = {
      'position': 'fixed',
      'top': 0,
      'left': 0,
      'overflow-y': 'auto',
      'overflow-x': 'hidden',
      'width': screen.width
    };
    return {
      _makeWrapper: function() {
        var prop, val, wrapper, wrapperHeight;
        body.css('overflow', 'hidden');
        wrapper = (jQuery("<div>")).appendTo(body).append(olay);
        wrapperHeight = olay.outerHeight() > screen.availHeight ? olay.outerHeight() : screen.availHeight;
        for (prop in wrapperStyle) {
          val = wrapperStyle[prop];
          wrapper.css(prop, val);
        }
        wrapper.css('height', wrapperHeight);
        return storeWrapper(olayId, wrapper);
      },
      onLoad: function(fn) {
        if (!jQuery.isFunction(fn)) {
          return null;
        }
        return olay.bind(EVENT.LOADED, excludeArgs(fn, 1));
      },
      onClose: function(fn) {
        if (!jQuery.isFunction(fn)) {
          return null;
        }
        return olay.bind(EVENT.CLOSED, excludeArgs(fn, 1));
      },
      trigger: function(sel) {
        return (jQuery(sel)).bind('click', function() {
          return showOlay(olayId);
        });
      },
      loaderCls: function(opts) {
        return console.log(">>> loaderCls");
      },
      lazy: function(opts) {
        return console.log(">>> lazy");
      },
      closeOnEsc: function(bool) {
        var _handleKeyUp;
        if (!bool) {
          return null;
        }
        _handleKeyUp = function(ev) {
          var i, ids, o;
          if (ev.which !== 27) {
            return null;
          }
          ids = (function() {
            var _results;
            _results = [];
            for (i in OVERLAYS) {
              o = OVERLAYS[i];
              _results.push(i);
            }
            return _results;
          })();
          return hideOlay(ids.reverse()[ids.length - 1]);
        };
        return body.bind('keyup', _handleKeyUp);
      },
      showOnLoad: function(bool) {
        var fn;
        fn = bool ? showOlay : hideOlay;
        return olay.bind(EVENT.LOADED, function() {
          return fn(olayId);
        });
      },
      mask: function(opts) {
        var height, mask, style, value, width, wrapper, zIndex;
        mask = jQuery("<div>");
        wrapper = getWrapper(olayId);
        zIndex = getMaxZIndex();
        width = wrapper.outerWidth();
        height = wrapper.outerHeight();
        if (jQuery.isPlainObject(opts)) {
          for (style in opts) {
            value = opts[style];
            if (style === 'color') {
              style = 'background-color';
            }
            mask.css(style, value);
          }
          if (!opts.opacity) {
            mask.css('opacity', 0.8);
          }
        } else {
          mask.css('background-color', opts).css('opacity', 0.8);
        }
        mask.css('position', 'fixed').css('z-index', zIndex).css('left', 0).css('top', 0).css('width', width).css('height', height);
        storeMask(olayId, mask);
        return wrapper.append(mask);
      },
      closeOnMask: function(bool) {
        var mask;
        if (!bool) {
          return true;
        }
        return mask = null;
      },
      closeSel: function(sel) {
        return (jQuery(sel)).bind('click', function() {
          return hideOlay(olayId);
        });
      },
      top: function(val) {
        return olayStyle.top = val || calcTop(olay);
      },
      _afterLoad: function() {
        var prop, val;
        for (prop in olayStyle) {
          val = olayStyle[prop];
          olay.css(prop, val);
        }
        return olay.css('left', (screen.width - olay.outerWidth()) / 2).css('z-index', getMaxZIndex() + 1).trigger(EVENT.LOADED, olayId);
      }
    };
  };

  overlay = function(opts) {
    opts = jQuery.extend(DEFAULT, opts);
    return this.each(function(idx, el) {
      var fn, jnode, jnodeId, name, _ref, _results;
      jnode = jQuery(el);
      jnodeId = getJNodeId(jnode);
      if (olayStored(jnodeId)) {
        return jnode;
      }
      storeOlayId(jnodeId, opts);
      _ref = methods(jnodeId);
      _results = [];
      for (name in _ref) {
        fn = _ref[name];
        _results.push(fn(opts[name]));
      }
      return _results;
    });
  };

  jQuery.fn.overlay = overlay;

}).call(this);
